//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class NewProject
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private NewProject() : base("LightSwitchApplication.Web:NewProject")
        {
            global::LightSwitchApplication.NewProject.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static NewProject CreateInstance()
        {
            return new global::LightSwitchApplication.NewProject(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void NewProject_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void ProjectProperty_Changed();

        partial void Project_Stakeholders_SelectionChanged();

        partial void Project_Stakeholders_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders_Loaded(bool succeeded);

        partial void RFQ_P_SelectionChanged();

        partial void RFQ_P_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RFQ_P_Loaded(bool succeeded);

        partial void Stakeholder_Changed();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholder_Loaded(bool succeeded);

        partial void Project_Stakeholders1_SelectionChanged();

        partial void Project_Stakeholders1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders1_Loaded(bool succeeded);

        partial void ID_Changed();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Project ProjectProperty
        {
            get 
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ProjectProperty);
            }
            set
            {
                global::LightSwitchApplication.NewProject.DetailsClass.SetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ProjectProperty, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectProperty_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Gets the Project_Stakeholders visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders
        {
            get
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Project_Stakeholders);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Gets the RFQ_P visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RFQ_PItem> RFQ_P
        {
            get
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.RFQ_P);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RFQ_P_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Stakeholder Stakeholder
        {
            get
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Stakeholder);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholder_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Gets the Project_Stakeholders1 visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders1
        {
            get
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Project_Stakeholders1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ID
        {
            get 
            {
                return global::LightSwitchApplication.NewProject.DetailsClass.GetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ID);
            }
            set
            {
                global::LightSwitchApplication.NewProject.DetailsClass.SetValue(this, global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Calls the AddPhase screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddPhase()
        {
            this.Details.Methods.AddPhase.CreateInvocation().Execute();
        }
        partial void AddPhase_CanExecute(ref bool result);
        partial void AddPhase_Execute();

        /// <summary>
        /// Calls the AddStakeholderType screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholderType()
        {
            this.Details.Methods.AddStakeholderType.CreateInvocation().Execute();
        }
        partial void AddStakeholderType_CanExecute(ref bool result);
        partial void AddStakeholderType_Execute();

        /// <summary>
        /// Calls the AddStakeholder screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholder()
        {
            this.Details.Methods.AddStakeholder.CreateInvocation().Execute();
        }
        partial void AddStakeholder_CanExecute(ref bool result);
        partial void AddStakeholder_Execute();

        /// <summary>
        /// Calls the Project_StakeholdersAddAndEditNew screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Project_StakeholdersAddAndEditNew()
        {
            this.Details.Methods.Project_StakeholdersAddAndEditNew.CreateInvocation().Execute();
        }
        partial void Project_StakeholdersAddAndEditNew_CanExecute(ref bool result);
        partial void Project_StakeholdersAddAndEditNew_Execute();

        /// <summary>
        /// Calls the Project_StakeholdersAddAndEditNew1 screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Project_StakeholdersAddAndEditNew1()
        {
            this.Details.Methods.Project_StakeholdersAddAndEditNew1.CreateInvocation().Execute();
        }
        partial void Project_StakeholdersAddAndEditNew1_CanExecute(ref bool result);
        partial void Project_StakeholdersAddAndEditNew1_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.NewProject.DetailsClass.PropertySet, global::LightSwitchApplication.NewProject.DetailsClass.CommandSet, global::LightSwitchApplication.NewProject.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ProjectProperty;
                var initializeCommandEntry = global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.AddPhase;
                var initializeMethodEntry = global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.AddPhase;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                __NewProjectEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeSavingEvent,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeSavedEvent,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeClosingEvent,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeCreated,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeActivated,
                    global::LightSwitchApplication.NewProject.DetailsClass.__NewProject_InvokeSaveErrorEvent);
            private static void __NewProject_InvokeInitializeDataWorkspace(global::LightSwitchApplication.NewProject s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.NewProject_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __NewProject_InvokeSavingEvent(global::LightSwitchApplication.NewProject s)
            {
                bool handled = false;
                s.NewProject_Saving(ref handled);
                return handled;
            }
            private static void __NewProject_InvokeSavedEvent(global::LightSwitchApplication.NewProject s)
            {
                s.NewProject_Saved();
            }
            private static bool __NewProject_InvokeClosingEvent(global::LightSwitchApplication.NewProject s)
            {
                bool cancel = false;
                s.NewProject_Closing(ref cancel);
                return cancel;
            }
            private static void __NewProject_InvokeCreated(global::LightSwitchApplication.NewProject s)
            {
                s.NewProject_Created();
            }
            private static void __NewProject_InvokeActivated(global::LightSwitchApplication.NewProject s)
            {
                s.NewProject_Activated();
            }
            private static bool __NewProject_InvokeSaveErrorEvent(global::LightSwitchApplication.NewProject s, global::System.Exception ex)
            {
                bool handled = false;
                s.NewProject_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.NewProject.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.NewProject.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.NewProject.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Project_StakeholdersQuery()
            {
                if (this.Screen.ProjectProperty == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.ProjectProperty.Details.Properties.Project_Stakeholders).Loader;
                if (loader == null)
                {
                    return null;
                }

                return loader;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RFQ_PQuery()
            {
                if (this.Screen.ProjectProperty == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RFQ_PItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RFQ_PItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.ProjectProperty.Details.Properties.RFQ_P).Loader;
                if (loader == null)
                {
                    return null;
                }

                return loader;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Project_Stakeholders1Query()
            {
                if (this.Screen.Stakeholder == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Stakeholder.Details.Properties.Project_Stakeholders).Loader;
                if (loader == null)
                {
                    return null;
                }

                return loader;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project>.Data _ProjectProperty;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data _Project_Stakeholders;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Data _RFQ_P;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder>.Data _Stakeholder;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data _Project_Stakeholders1;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int>.Data _ID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddPhaseCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddStakeholderTypeCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddStakeholderCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _Project_StakeholdersAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _Project_StakeholdersAddAndEditNew1Command;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddPhaseMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddStakeholderTypeMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _AddStakeholderMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _Project_StakeholdersAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data _Project_StakeholdersAddAndEditNew1Method;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project> ProjectProperty
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ProjectProperty);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Project_Stakeholders);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem> RFQ_P
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.RFQ_P);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder> Stakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Stakeholder);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.Project_Stakeholders1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int> ID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties.ID);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddPhase
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.AddPhase);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.AddStakeholder);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> Project_StakeholdersAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.Project_StakeholdersAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> Project_StakeholdersAddAndEditNew1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties.Project_StakeholdersAddAndEditNew1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddPhase
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.AddPhase);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.AddStakeholder);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> Project_StakeholdersAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.Project_StakeholdersAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass> Project_StakeholdersAddAndEditNew1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>)base.GetItem(global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties.Project_StakeholdersAddAndEditNew1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project>.Entry
                    ProjectProperty = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project>.Entry(
                        "ProjectProperty",
                        false,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ProjectProperty_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ProjectProperty_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ProjectProperty_OnValueChanged);
                private static void _ProjectProperty_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._ProjectProperty, sf);
                }
                private static void _ProjectProperty_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ProjectProperty_Validate(r);
                }
                private static void _ProjectProperty_OnValueChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.ProjectProperty_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry
                    Project_Stakeholders = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry(
                        "Project_Stakeholders",
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_CreateQuery,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_SelectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_OnCollectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders_OnLoaded);
                private static void _Project_Stakeholders_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_Stakeholders, sf);
                }
                private static void _Project_Stakeholders_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Project_Stakeholders_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Project_Stakeholders_CreateQuery(global::LightSwitchApplication.NewProject.DetailsClass d, object[] args)
                {
                    return d.Project_StakeholdersQuery();
                }
                private static void _Project_Stakeholders_SelectionChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.Project_Stakeholders_SelectionChanged();
                }
                private static void _Project_Stakeholders_OnCollectionChanged(global::LightSwitchApplication.NewProject s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Project_Stakeholders_Changed(e);
                }
                private static void _Project_Stakeholders_OnLoaded(global::LightSwitchApplication.NewProject s, bool succeeded)
                {
                    s.Project_Stakeholders_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Entry
                    RFQ_P = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Entry(
                        "RFQ_P",
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_CreateQuery,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_SelectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_OnCollectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._RFQ_P_OnLoaded);
                private static void _RFQ_P_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._RFQ_P, sf);
                }
                private static void _RFQ_P_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RFQ_P_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RFQ_P_CreateQuery(global::LightSwitchApplication.NewProject.DetailsClass d, object[] args)
                {
                    return d.RFQ_PQuery();
                }
                private static void _RFQ_P_SelectionChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.RFQ_P_SelectionChanged();
                }
                private static void _RFQ_P_OnCollectionChanged(global::LightSwitchApplication.NewProject s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RFQ_P_Changed(e);
                }
                private static void _RFQ_P_OnLoaded(global::LightSwitchApplication.NewProject s, bool succeeded)
                {
                    s.RFQ_P_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder>.Entry
                    Stakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder>.Entry(
                        "Stakeholder",
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Stakeholder_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Stakeholder_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Stakeholder_CreateQuery,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Stakeholder_OnValueChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Stakeholder_OnLoaded);
                private static void _Stakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Stakeholder>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Stakeholder, sf);
                }
                private static void _Stakeholder_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Stakeholder_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Stakeholder_CreateQuery(global::LightSwitchApplication.NewProject.DetailsClass d, object[] args)
                {
                    return null;
                }
                private static void _Stakeholder_OnValueChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.Stakeholder_Changed();
                }

                private static void _Stakeholder_OnLoaded(global::LightSwitchApplication.NewProject s, bool succeeded)
                {
                    s.Stakeholder_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry
                    Project_Stakeholders1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry(
                        "Project_Stakeholders1",
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_CreateQuery,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_SelectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_OnCollectionChanged,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._Project_Stakeholders1_OnLoaded);
                private static void _Project_Stakeholders1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_Stakeholders1, sf);
                }
                private static void _Project_Stakeholders1_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Project_Stakeholders1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Project_Stakeholders1_CreateQuery(global::LightSwitchApplication.NewProject.DetailsClass d, object[] args)
                {
                    return d.Project_Stakeholders1Query();
                }
                private static void _Project_Stakeholders1_SelectionChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.Project_Stakeholders1_SelectionChanged();
                }
                private static void _Project_Stakeholders1_OnCollectionChanged(global::LightSwitchApplication.NewProject s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Project_Stakeholders1_Changed(e);
                }
                private static void _Project_Stakeholders1_OnLoaded(global::LightSwitchApplication.NewProject s, bool succeeded)
                {
                    s.Project_Stakeholders1_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int>.Entry
                    ID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int>.Entry(
                        "ID",
                        false,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ID_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ID_Validate,
                        global::LightSwitchApplication.NewProject.DetailsClass.PropertySetProperties._ID_OnValueChanged);
                private static void _ID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass, int>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._ID, sf);
                }
                private static void _ID_Validate(global::LightSwitchApplication.NewProject s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ID_Validate(r);
                }
                private static void _ID_OnValueChanged(global::LightSwitchApplication.NewProject s)
                {
                    s.ID_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddPhase = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddPhase",
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddPhase_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddPhase_CreateExecutableObject);
                private static void _AddPhase_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddPhaseCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddPhase_CreateExecutableObject(global::LightSwitchApplication.NewProject.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.NewProject.DetailsClass)d).Methods.AddPhase.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddStakeholderType_CreateExecutableObject);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholderType_CreateExecutableObject(global::LightSwitchApplication.NewProject.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.NewProject.DetailsClass)d).Methods.AddStakeholderType.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._AddStakeholder_CreateExecutableObject);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholder_CreateExecutableObject(global::LightSwitchApplication.NewProject.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.NewProject.DetailsClass)d).Methods.AddStakeholder.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew",
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew_CreateExecutableObject);
                private static void _Project_StakeholdersAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Project_StakeholdersAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.NewProject.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.NewProject.DetailsClass)d).Methods.Project_StakeholdersAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew1",
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew1_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew1_CreateExecutableObject);
                private static void _Project_StakeholdersAddAndEditNew1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNew1Command, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Project_StakeholdersAddAndEditNew1_CreateExecutableObject(global::LightSwitchApplication.NewProject.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.NewProject.DetailsClass)d).Methods.Project_StakeholdersAddAndEditNew1.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddPhase = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddPhase",
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddPhase_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddPhase_CanInvoke,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddPhase_InvokeMethod);
                private static void _AddPhase_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddPhaseMethod, sf);
                }
                private static global::System.Exception _AddPhase_CanInvoke(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddPhase_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddPhase_InvokeMethod(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddPhase_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholderType_CanInvoke,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholderType_InvokeMethod);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeMethod, sf);
                }
                private static global::System.Exception _AddStakeholderType_CanInvoke(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholderType_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholderType_InvokeMethod(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholderType_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholder_CanInvoke,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._AddStakeholder_InvokeMethod);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderMethod, sf);
                }
                private static global::System.Exception _AddStakeholder_CanInvoke(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholder_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholder_InvokeMethod(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholder_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew",
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_InvokeMethod);
                private static void _Project_StakeholdersAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _Project_StakeholdersAddAndEditNew_CanInvoke(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Project_StakeholdersAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Project_StakeholdersAddAndEditNew_InvokeMethod(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Project_StakeholdersAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew1",
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_Stub,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_CanInvoke,
                        global::LightSwitchApplication.NewProject.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_InvokeMethod);
                private static void _Project_StakeholdersAddAndEditNew1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.NewProject.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.NewProject, global::LightSwitchApplication.NewProject.DetailsClass>.Data> c, global::LightSwitchApplication.NewProject.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNew1Method, sf);
                }
                private static global::System.Exception _Project_StakeholdersAddAndEditNew1_CanInvoke(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Project_StakeholdersAddAndEditNew1_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Project_StakeholdersAddAndEditNew1_InvokeMethod(global::LightSwitchApplication.NewProject.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Project_StakeholdersAddAndEditNew1_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class PhaseLookup
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private PhaseLookup() : base("LightSwitchApplication.Web:PhaseLookup")
        {
            global::LightSwitchApplication.PhaseLookup.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static PhaseLookup CreateInstance()
        {
            return new global::LightSwitchApplication.PhaseLookup(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void PhaseLookup_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Phases_SelectionChanged();

        partial void Phases_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Phases_Loaded(bool succeeded);

        /// <summary>
        /// Gets the Phases visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Phase> Phases
        {
            get
            {
                return global::LightSwitchApplication.PhaseLookup.DetailsClass.GetValue(this, global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties.Phases);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Phases_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySet, global::LightSwitchApplication.PhaseLookup.DetailsClass.CommandSet, global::LightSwitchApplication.PhaseLookup.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties.Phases;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>.Entry
                __PhaseLookupEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>.Entry(
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeSavingEvent,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeSavedEvent,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeClosingEvent,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeCreated,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeActivated,
                    global::LightSwitchApplication.PhaseLookup.DetailsClass.__PhaseLookup_InvokeSaveErrorEvent);
            private static void __PhaseLookup_InvokeInitializeDataWorkspace(global::LightSwitchApplication.PhaseLookup s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.PhaseLookup_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __PhaseLookup_InvokeSavingEvent(global::LightSwitchApplication.PhaseLookup s)
            {
                bool handled = false;
                s.PhaseLookup_Saving(ref handled);
                return handled;
            }
            private static void __PhaseLookup_InvokeSavedEvent(global::LightSwitchApplication.PhaseLookup s)
            {
                s.PhaseLookup_Saved();
            }
            private static bool __PhaseLookup_InvokeClosingEvent(global::LightSwitchApplication.PhaseLookup s)
            {
                bool cancel = false;
                s.PhaseLookup_Closing(ref cancel);
                return cancel;
            }
            private static void __PhaseLookup_InvokeCreated(global::LightSwitchApplication.PhaseLookup s)
            {
                s.PhaseLookup_Created();
            }
            private static void __PhaseLookup_InvokeActivated(global::LightSwitchApplication.PhaseLookup s)
            {
                s.PhaseLookup_Activated();
            }
            private static bool __PhaseLookup_InvokeSaveErrorEvent(global::LightSwitchApplication.PhaseLookup s, global::System.Exception ex)
            {
                bool handled = false;
                s.PhaseLookup_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.PhaseLookup.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.PhaseLookup.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable PhasesQuery()
            {
                return this.Screen.DataWorkspace.ProcurementData.Phases;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase>.Data _Phases;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase> Phases
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase>)base.GetItem(global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties.Phases);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase>.Entry
                    Phases = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase>.Entry(
                        "Phases",
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_Stub,
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_Validate,
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_CreateQuery,
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_SelectionChanged,
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_OnCollectionChanged,
                        global::LightSwitchApplication.PhaseLookup.DetailsClass.PropertySetProperties._Phases_OnLoaded);
                private static void _Phases_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.PhaseLookup.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.PhaseLookup, global::LightSwitchApplication.PhaseLookup.DetailsClass, global::LightSwitchApplication.Phase>.Data> c, global::LightSwitchApplication.PhaseLookup.DetailsClass d, object sf)
                {
                    c(d, ref d._Phases, sf);
                }
                private static void _Phases_Validate(global::LightSwitchApplication.PhaseLookup s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Phases_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Phases_CreateQuery(global::LightSwitchApplication.PhaseLookup.DetailsClass d, object[] args)
                {
                    return d.PhasesQuery();
                }
                private static void _Phases_SelectionChanged(global::LightSwitchApplication.PhaseLookup s)
                {
                    s.Phases_SelectionChanged();
                }
                private static void _Phases_OnCollectionChanged(global::LightSwitchApplication.PhaseLookup s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Phases_Changed(e);
                }
                private static void _Phases_OnLoaded(global::LightSwitchApplication.PhaseLookup s, bool succeeded)
                {
                    s.Phases_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class ProjectDetails
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private ProjectDetails(int ProjectID) : base("LightSwitchApplication.Web:ProjectDetails")
        {
                this.ProjectID = ProjectID;
            global::LightSwitchApplication.ProjectDetails.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static ProjectDetails CreateInstance(int ProjectID)
        {
            return new global::LightSwitchApplication.ProjectDetails(
                        ProjectID
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectDetails_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Project_Changed();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Loaded(bool succeeded);

        partial void ProjectID_Changed();

        partial void RFQ_P_SelectionChanged();

        partial void RFQ_P_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RFQ_P_Loaded(bool succeeded);

        partial void Project_Stakeholders_SelectionChanged();

        partial void Project_Stakeholders_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders_Loaded(bool succeeded);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Project Project
        {
            get
            {
                return global::LightSwitchApplication.ProjectDetails.DetailsClass.GetValue(this, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.Project);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int ProjectID
        {
            get 
            {
                return global::LightSwitchApplication.ProjectDetails.DetailsClass.GetValue(this, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.ProjectID);
            }
            set
            {
                global::LightSwitchApplication.ProjectDetails.DetailsClass.SetValue(this, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.ProjectID, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void ProjectID_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Gets the RFQ_P visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.RFQ_PItem> RFQ_P
        {
            get
            {
                return global::LightSwitchApplication.ProjectDetails.DetailsClass.GetValue(this, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.RFQ_P);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void RFQ_P_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Gets the Project_Stakeholders visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders
        {
            get
            {
                return global::LightSwitchApplication.ProjectDetails.DetailsClass.GetValue(this, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.Project_Stakeholders);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_Stakeholders_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Calls the Project_Stakeholders1AddAndEditNew screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Project_Stakeholders1AddAndEditNew()
        {
            this.Details.Methods.Project_Stakeholders1AddAndEditNew.CreateInvocation().Execute();
        }
        partial void Project_Stakeholders1AddAndEditNew_CanExecute(ref bool result);
        partial void Project_Stakeholders1AddAndEditNew_Execute();

        /// <summary>
        /// Calls the Project_StakeholdersAddAndEditNew screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Project_StakeholdersAddAndEditNew()
        {
            this.Details.Methods.Project_StakeholdersAddAndEditNew.CreateInvocation().Execute();
        }
        partial void Project_StakeholdersAddAndEditNew_CanExecute(ref bool result);
        partial void Project_StakeholdersAddAndEditNew_Execute();

        /// <summary>
        /// Calls the Project_StakeholdersAddAndEditNew1 screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Project_StakeholdersAddAndEditNew1()
        {
            this.Details.Methods.Project_StakeholdersAddAndEditNew1.CreateInvocation().Execute();
        }
        partial void Project_StakeholdersAddAndEditNew1_CanExecute(ref bool result);
        partial void Project_StakeholdersAddAndEditNew1_Execute();

        /// <summary>
        /// Calls the AddPSH screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddPSH()
        {
            this.Details.Methods.AddPSH.CreateInvocation().Execute();
        }
        partial void AddPSH_CanExecute(ref bool result);
        partial void AddPSH_Execute();

        /// <summary>
        /// Calls the AddStakeholderType screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholderType()
        {
            this.Details.Methods.AddStakeholderType.CreateInvocation().Execute();
        }
        partial void AddStakeholderType_CanExecute(ref bool result);
        partial void AddStakeholderType_Execute();

        /// <summary>
        /// Calls the AddStakeholder screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholder()
        {
            this.Details.Methods.AddStakeholder.CreateInvocation().Execute();
        }
        partial void AddStakeholder_CanExecute(ref bool result);
        partial void AddStakeholder_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySet, global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSet, global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.Project;
                var initializeCommandEntry = global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.Project_Stakeholders1AddAndEditNew;
                var initializeMethodEntry = global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.Project_Stakeholders1AddAndEditNew;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                __ProjectDetailsEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeSavingEvent,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeSavedEvent,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeClosingEvent,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeCreated,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeActivated,
                    global::LightSwitchApplication.ProjectDetails.DetailsClass.__ProjectDetails_InvokeSaveErrorEvent);
            private static void __ProjectDetails_InvokeInitializeDataWorkspace(global::LightSwitchApplication.ProjectDetails s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.ProjectDetails_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __ProjectDetails_InvokeSavingEvent(global::LightSwitchApplication.ProjectDetails s)
            {
                bool handled = false;
                s.ProjectDetails_Saving(ref handled);
                return handled;
            }
            private static void __ProjectDetails_InvokeSavedEvent(global::LightSwitchApplication.ProjectDetails s)
            {
                s.ProjectDetails_Saved();
            }
            private static bool __ProjectDetails_InvokeClosingEvent(global::LightSwitchApplication.ProjectDetails s)
            {
                bool cancel = false;
                s.ProjectDetails_Closing(ref cancel);
                return cancel;
            }
            private static void __ProjectDetails_InvokeCreated(global::LightSwitchApplication.ProjectDetails s)
            {
                s.ProjectDetails_Created();
            }
            private static void __ProjectDetails_InvokeActivated(global::LightSwitchApplication.ProjectDetails s)
            {
                s.ProjectDetails_Activated();
            }
            private static bool __ProjectDetails_InvokeSaveErrorEvent(global::LightSwitchApplication.ProjectDetails s, global::System.Exception ex)
            {
                bool handled = false;
                s.ProjectDetails_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable RFQ_PQuery()
            {
                if (this.Screen.Project == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RFQ_PItem> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.RFQ_PItem>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Project.Details.Properties.RFQ_P).Loader;
                if (loader == null)
                {
                    return null;
                }

                return loader;
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Project_StakeholdersQuery()
            {
                if (this.Screen.Project == null)
                {
                    return null;
                }

                global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder> loader =
                    (global::Microsoft.LightSwitch.IDataServiceQueryable<global::LightSwitchApplication.Project_Stakeholder>)((global::Microsoft.LightSwitch.Details.ILoadableProperty)this.Screen.Project.Details.Properties.Project_Stakeholders).Loader;
                if (loader == null)
                {
                    return null;
                }

                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        loader,
                        "Stakeholder_Type"),
                    "Stakeholder1");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project>.Data _Project;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int>.Data _ProjectID;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Data _RFQ_P;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data _Project_Stakeholders;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_Stakeholders1AddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_StakeholdersAddAndEditNewCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_StakeholdersAddAndEditNew1Command;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddPSHCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddStakeholderTypeCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddStakeholderCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_Stakeholders1AddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_StakeholdersAddAndEditNewMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _Project_StakeholdersAddAndEditNew1Method;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddPSHMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddStakeholderTypeMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data _AddStakeholderMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project> Project
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.Project);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int> ProjectID
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.ProjectID);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem> RFQ_P
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.RFQ_P);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder> Project_Stakeholders
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties.Project_Stakeholders);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_Stakeholders1AddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.Project_Stakeholders1AddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_StakeholdersAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.Project_StakeholdersAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_StakeholdersAddAndEditNew1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.Project_StakeholdersAddAndEditNew1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddPSH
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.AddPSH);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties.AddStakeholder);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_Stakeholders1AddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.Project_Stakeholders1AddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_StakeholdersAddAndEditNew
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.Project_StakeholdersAddAndEditNew);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> Project_StakeholdersAddAndEditNew1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.Project_StakeholdersAddAndEditNew1);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddPSH
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.AddPSH);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>)base.GetItem(global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties.AddStakeholder);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project>.Entry
                    Project = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project>.Entry(
                        "Project",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Validate,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_CreateQuery,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_OnValueChanged,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_OnLoaded);
                private static void _Project_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenReferenceProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project, sf);
                }
                private static void _Project_Validate(global::LightSwitchApplication.ProjectDetails s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Project_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Project_CreateQuery(global::LightSwitchApplication.ProjectDetails.DetailsClass d, object[] args)
                {
                    return null;
                }
                private static void _Project_OnValueChanged(global::LightSwitchApplication.ProjectDetails s)
                {
                    s.Project_Changed();
                }

                private static void _Project_OnLoaded(global::LightSwitchApplication.ProjectDetails s, bool succeeded)
                {
                    s.Project_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int>.Entry
                    ProjectID = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int>.Entry(
                        "ProjectID",
                        false,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._ProjectID_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._ProjectID_Validate,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._ProjectID_OnValueChanged);
                private static void _ProjectID_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, int>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._ProjectID, sf);
                }
                private static void _ProjectID_Validate(global::LightSwitchApplication.ProjectDetails s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.ProjectID_Validate(r);
                }
                private static void _ProjectID_OnValueChanged(global::LightSwitchApplication.ProjectDetails s)
                {
                    s.ProjectID_Changed();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Entry
                    RFQ_P = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Entry(
                        "RFQ_P",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_Validate,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_CreateQuery,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_SelectionChanged,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_OnCollectionChanged,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._RFQ_P_OnLoaded);
                private static void _RFQ_P_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.RFQ_PItem>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._RFQ_P, sf);
                }
                private static void _RFQ_P_Validate(global::LightSwitchApplication.ProjectDetails s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.RFQ_P_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _RFQ_P_CreateQuery(global::LightSwitchApplication.ProjectDetails.DetailsClass d, object[] args)
                {
                    return d.RFQ_PQuery();
                }
                private static void _RFQ_P_SelectionChanged(global::LightSwitchApplication.ProjectDetails s)
                {
                    s.RFQ_P_SelectionChanged();
                }
                private static void _RFQ_P_OnCollectionChanged(global::LightSwitchApplication.ProjectDetails s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.RFQ_P_Changed(e);
                }
                private static void _RFQ_P_OnLoaded(global::LightSwitchApplication.ProjectDetails s, bool succeeded)
                {
                    s.RFQ_P_Loaded(succeeded);
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry
                    Project_Stakeholders = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry(
                        "Project_Stakeholders",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_Validate,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_CreateQuery,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_SelectionChanged,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_OnCollectionChanged,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.PropertySetProperties._Project_Stakeholders_OnLoaded);
                private static void _Project_Stakeholders_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_Stakeholders, sf);
                }
                private static void _Project_Stakeholders_Validate(global::LightSwitchApplication.ProjectDetails s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Project_Stakeholders_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Project_Stakeholders_CreateQuery(global::LightSwitchApplication.ProjectDetails.DetailsClass d, object[] args)
                {
                    return d.Project_StakeholdersQuery();
                }
                private static void _Project_Stakeholders_SelectionChanged(global::LightSwitchApplication.ProjectDetails s)
                {
                    s.Project_Stakeholders_SelectionChanged();
                }
                private static void _Project_Stakeholders_OnCollectionChanged(global::LightSwitchApplication.ProjectDetails s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Project_Stakeholders_Changed(e);
                }
                private static void _Project_Stakeholders_OnLoaded(global::LightSwitchApplication.ProjectDetails s, bool succeeded)
                {
                    s.Project_Stakeholders_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_Stakeholders1AddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_Stakeholders1AddAndEditNew",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_Stakeholders1AddAndEditNew_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_Stakeholders1AddAndEditNew_CreateExecutableObject);
                private static void _Project_Stakeholders1AddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_Stakeholders1AddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Project_Stakeholders1AddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.Project_Stakeholders1AddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew_CreateExecutableObject);
                private static void _Project_StakeholdersAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNewCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Project_StakeholdersAddAndEditNew_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.Project_StakeholdersAddAndEditNew.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew1",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew1_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._Project_StakeholdersAddAndEditNew1_CreateExecutableObject);
                private static void _Project_StakeholdersAddAndEditNew1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNew1Command, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _Project_StakeholdersAddAndEditNew1_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.Project_StakeholdersAddAndEditNew1.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddPSH = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddPSH",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddPSH_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddPSH_CreateExecutableObject);
                private static void _AddPSH_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddPSHCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddPSH_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.AddPSH.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddStakeholderType_CreateExecutableObject);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholderType_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.AddStakeholderType.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.CommandSetProperties._AddStakeholder_CreateExecutableObject);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholder_CreateExecutableObject(global::LightSwitchApplication.ProjectDetails.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.ProjectDetails.DetailsClass)d).Methods.AddStakeholder.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_Stakeholders1AddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_Stakeholders1AddAndEditNew",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_Stakeholders1AddAndEditNew_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_Stakeholders1AddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_Stakeholders1AddAndEditNew_InvokeMethod);
                private static void _Project_Stakeholders1AddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_Stakeholders1AddAndEditNewMethod, sf);
                }
                private static global::System.Exception _Project_Stakeholders1AddAndEditNew_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Project_Stakeholders1AddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Project_Stakeholders1AddAndEditNew_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Project_Stakeholders1AddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew_InvokeMethod);
                private static void _Project_StakeholdersAddAndEditNew_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNewMethod, sf);
                }
                private static global::System.Exception _Project_StakeholdersAddAndEditNew_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Project_StakeholdersAddAndEditNew_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Project_StakeholdersAddAndEditNew_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Project_StakeholdersAddAndEditNew_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    Project_StakeholdersAddAndEditNew1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "Project_StakeholdersAddAndEditNew1",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._Project_StakeholdersAddAndEditNew1_InvokeMethod);
                private static void _Project_StakeholdersAddAndEditNew1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholdersAddAndEditNew1Method, sf);
                }
                private static global::System.Exception _Project_StakeholdersAddAndEditNew1_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.Project_StakeholdersAddAndEditNew1_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _Project_StakeholdersAddAndEditNew1_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.Project_StakeholdersAddAndEditNew1_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddPSH = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddPSH",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddPSH_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddPSH_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddPSH_InvokeMethod);
                private static void _AddPSH_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddPSHMethod, sf);
                }
                private static global::System.Exception _AddPSH_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddPSH_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddPSH_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddPSH_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholderType_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholderType_InvokeMethod);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeMethod, sf);
                }
                private static global::System.Exception _AddStakeholderType_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholderType_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholderType_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholderType_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholder_CanInvoke,
                        global::LightSwitchApplication.ProjectDetails.DetailsClass.MethodSetProperties._AddStakeholder_InvokeMethod);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.ProjectDetails.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.ProjectDetails, global::LightSwitchApplication.ProjectDetails.DetailsClass>.Data> c, global::LightSwitchApplication.ProjectDetails.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderMethod, sf);
                }
                private static global::System.Exception _AddStakeholder_CanInvoke(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholder_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholder_InvokeMethod(global::LightSwitchApplication.ProjectDetails.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholder_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class Projects
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private Projects() : base("LightSwitchApplication.Web:Projects")
        {
            global::LightSwitchApplication.Projects.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static Projects CreateInstance()
        {
            return new global::LightSwitchApplication.Projects(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Projects1_SelectionChanged();

        partial void Projects1_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects1_Loaded(bool succeeded);

        /// <summary>
        /// Gets the Projects1 visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Project> Projects1
        {
            get
            {
                return global::LightSwitchApplication.Projects.DetailsClass.GetValue(this, global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties.Projects1);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Projects1_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Projects.DetailsClass.PropertySet, global::LightSwitchApplication.Projects.DetailsClass.CommandSet, global::LightSwitchApplication.Projects.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties.Projects1;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>.Entry
                __ProjectsEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>.Entry(
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeSavingEvent,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeSavedEvent,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeClosingEvent,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeCreated,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeActivated,
                    global::LightSwitchApplication.Projects.DetailsClass.__Projects_InvokeSaveErrorEvent);
            private static void __Projects_InvokeInitializeDataWorkspace(global::LightSwitchApplication.Projects s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.Projects_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __Projects_InvokeSavingEvent(global::LightSwitchApplication.Projects s)
            {
                bool handled = false;
                s.Projects_Saving(ref handled);
                return handled;
            }
            private static void __Projects_InvokeSavedEvent(global::LightSwitchApplication.Projects s)
            {
                s.Projects_Saved();
            }
            private static bool __Projects_InvokeClosingEvent(global::LightSwitchApplication.Projects s)
            {
                bool cancel = false;
                s.Projects_Closing(ref cancel);
                return cancel;
            }
            private static void __Projects_InvokeCreated(global::LightSwitchApplication.Projects s)
            {
                s.Projects_Created();
            }
            private static void __Projects_InvokeActivated(global::LightSwitchApplication.Projects s)
            {
                s.Projects_Activated();
            }
            private static bool __Projects_InvokeSaveErrorEvent(global::LightSwitchApplication.Projects s, global::System.Exception ex)
            {
                bool handled = false;
                s.Projects_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.Projects.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.Projects.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.Projects.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Projects1Query()
            {
                return global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                    global::Microsoft.LightSwitch.DataServiceQueryable.Include(
                        this.Screen.DataWorkspace.ProcurementData.Projects,
                        "Client1"),
                    "Phase1");
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project>.Data _Projects1;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project> Projects1
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project>)base.GetItem(global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties.Projects1);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project>.Entry
                    Projects1 = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project>.Entry(
                        "Projects1",
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_Stub,
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_Validate,
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_CreateQuery,
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_SelectionChanged,
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_OnCollectionChanged,
                        global::LightSwitchApplication.Projects.DetailsClass.PropertySetProperties._Projects1_OnLoaded);
                private static void _Projects1_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.Projects.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.Projects, global::LightSwitchApplication.Projects.DetailsClass, global::LightSwitchApplication.Project>.Data> c, global::LightSwitchApplication.Projects.DetailsClass d, object sf)
                {
                    c(d, ref d._Projects1, sf);
                }
                private static void _Projects1_Validate(global::LightSwitchApplication.Projects s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Projects1_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Projects1_CreateQuery(global::LightSwitchApplication.Projects.DetailsClass d, object[] args)
                {
                    return d.Projects1Query();
                }
                private static void _Projects1_SelectionChanged(global::LightSwitchApplication.Projects s)
                {
                    s.Projects1_SelectionChanged();
                }
                private static void _Projects1_OnCollectionChanged(global::LightSwitchApplication.Projects s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Projects1_Changed(e);
                }
                private static void _Projects1_OnLoaded(global::LightSwitchApplication.Projects s, bool succeeded)
                {
                    s.Projects1_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class StakeholdertypeLookup
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private StakeholdertypeLookup() : base("LightSwitchApplication.Web:StakeholdertypeLookup")
        {
            global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static StakeholdertypeLookup CreateInstance()
        {
            return new global::LightSwitchApplication.StakeholdertypeLookup(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void StakeholdertypeLookup_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Stakeholder_Types_SelectionChanged();

        partial void Stakeholder_Types_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholder_Types_Loaded(bool succeeded);

        /// <summary>
        /// Gets the Stakeholder_Types visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Stakeholder_Type> Stakeholder_Types
        {
            get
            {
                return global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.GetValue(this, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties.Stakeholder_Types);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholder_Types_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySet, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.CommandSet, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties.Stakeholder_Types;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>.Entry
                __StakeholdertypeLookupEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>.Entry(
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeSavingEvent,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeSavedEvent,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeClosingEvent,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeCreated,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeActivated,
                    global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.__StakeholdertypeLookup_InvokeSaveErrorEvent);
            private static void __StakeholdertypeLookup_InvokeInitializeDataWorkspace(global::LightSwitchApplication.StakeholdertypeLookup s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.StakeholdertypeLookup_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __StakeholdertypeLookup_InvokeSavingEvent(global::LightSwitchApplication.StakeholdertypeLookup s)
            {
                bool handled = false;
                s.StakeholdertypeLookup_Saving(ref handled);
                return handled;
            }
            private static void __StakeholdertypeLookup_InvokeSavedEvent(global::LightSwitchApplication.StakeholdertypeLookup s)
            {
                s.StakeholdertypeLookup_Saved();
            }
            private static bool __StakeholdertypeLookup_InvokeClosingEvent(global::LightSwitchApplication.StakeholdertypeLookup s)
            {
                bool cancel = false;
                s.StakeholdertypeLookup_Closing(ref cancel);
                return cancel;
            }
            private static void __StakeholdertypeLookup_InvokeCreated(global::LightSwitchApplication.StakeholdertypeLookup s)
            {
                s.StakeholdertypeLookup_Created();
            }
            private static void __StakeholdertypeLookup_InvokeActivated(global::LightSwitchApplication.StakeholdertypeLookup s)
            {
                s.StakeholdertypeLookup_Activated();
            }
            private static bool __StakeholdertypeLookup_InvokeSaveErrorEvent(global::LightSwitchApplication.StakeholdertypeLookup s, global::System.Exception ex)
            {
                bool handled = false;
                s.StakeholdertypeLookup_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable Stakeholder_TypesQuery()
            {
                return this.Screen.DataWorkspace.ProcurementData.Stakeholder_Types;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type>.Data _Stakeholder_Types;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type> Stakeholder_Types
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type>)base.GetItem(global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties.Stakeholder_Types);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type>.Entry
                    Stakeholder_Types = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type>.Entry(
                        "Stakeholder_Types",
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_Stub,
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_Validate,
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_CreateQuery,
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_SelectionChanged,
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_OnCollectionChanged,
                        global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass.PropertySetProperties._Stakeholder_Types_OnLoaded);
                private static void _Stakeholder_Types_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.StakeholdertypeLookup, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass, global::LightSwitchApplication.Stakeholder_Type>.Data> c, global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass d, object sf)
                {
                    c(d, ref d._Stakeholder_Types, sf);
                }
                private static void _Stakeholder_Types_Validate(global::LightSwitchApplication.StakeholdertypeLookup s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Stakeholder_Types_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Stakeholder_Types_CreateQuery(global::LightSwitchApplication.StakeholdertypeLookup.DetailsClass d, object[] args)
                {
                    return d.Stakeholder_TypesQuery();
                }
                private static void _Stakeholder_Types_SelectionChanged(global::LightSwitchApplication.StakeholdertypeLookup s)
                {
                    s.Stakeholder_Types_SelectionChanged();
                }
                private static void _Stakeholder_Types_OnCollectionChanged(global::LightSwitchApplication.StakeholdertypeLookup s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Stakeholder_Types_Changed(e);
                }
                private static void _Stakeholder_Types_OnLoaded(global::LightSwitchApplication.StakeholdertypeLookup s, bool succeeded)
                {
                    s.Stakeholder_Types_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class AddProjectStakeholder
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private AddProjectStakeholder() : base("LightSwitchApplication.Web:AddProjectStakeholder")
        {
            global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static AddProjectStakeholder CreateInstance()
        {
            return new global::LightSwitchApplication.AddProjectStakeholder(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddProjectStakeholder_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Project_StakeholderProperty_Changed();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::LightSwitchApplication.Project_Stakeholder Project_StakeholderProperty
        {
            get 
            {
                return global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.GetValue(this, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties.Project_StakeholderProperty);
            }
            set
            {
                global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.SetValue(this, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties.Project_StakeholderProperty, value);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Project_StakeholderProperty_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        /// <summary>
        /// Calls the AddStakeholderType screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholderType()
        {
            this.Details.Methods.AddStakeholderType.CreateInvocation().Execute();
        }
        partial void AddStakeholderType_CanExecute(ref bool result);
        partial void AddStakeholderType_Execute();

        /// <summary>
        /// Calls the AddStakeholder screen method.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStakeholder()
        {
            this.Details.Methods.AddStakeholder.CreateInvocation().Execute();
        }
        partial void AddStakeholder_CanExecute(ref bool result);
        partial void AddStakeholder_Execute();

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySet, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSet, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties.Project_StakeholderProperty;
                var initializeCommandEntry = global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties.AddStakeholderType;
                var initializeMethodEntry = global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties.AddStakeholderType;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry
                __AddProjectStakeholderEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry(
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeSavingEvent,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeSavedEvent,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeClosingEvent,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeCreated,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeActivated,
                    global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.__AddProjectStakeholder_InvokeSaveErrorEvent);
            private static void __AddProjectStakeholder_InvokeInitializeDataWorkspace(global::LightSwitchApplication.AddProjectStakeholder s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.AddProjectStakeholder_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __AddProjectStakeholder_InvokeSavingEvent(global::LightSwitchApplication.AddProjectStakeholder s)
            {
                bool handled = false;
                s.AddProjectStakeholder_Saving(ref handled);
                return handled;
            }
            private static void __AddProjectStakeholder_InvokeSavedEvent(global::LightSwitchApplication.AddProjectStakeholder s)
            {
                s.AddProjectStakeholder_Saved();
            }
            private static bool __AddProjectStakeholder_InvokeClosingEvent(global::LightSwitchApplication.AddProjectStakeholder s)
            {
                bool cancel = false;
                s.AddProjectStakeholder_Closing(ref cancel);
                return cancel;
            }
            private static void __AddProjectStakeholder_InvokeCreated(global::LightSwitchApplication.AddProjectStakeholder s)
            {
                s.AddProjectStakeholder_Created();
            }
            private static void __AddProjectStakeholder_InvokeActivated(global::LightSwitchApplication.AddProjectStakeholder s)
            {
                s.AddProjectStakeholder_Activated();
            }
            private static bool __AddProjectStakeholder_InvokeSaveErrorEvent(global::LightSwitchApplication.AddProjectStakeholder s, global::System.Exception ex)
            {
                bool handled = false;
                s.AddProjectStakeholder_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data _Project_StakeholderProperty;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data _AddStakeholderTypeCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data _AddStakeholderCommand;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data _AddStakeholderTypeMethod;

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data _AddStakeholderMethod;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder> Project_StakeholderProperty
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>)base.GetItem(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties.Project_StakeholderProperty);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>)base.GetItem(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>)base.GetItem(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties.AddStakeholder);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass> AddStakeholderType
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>)base.GetItem(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties.AddStakeholderType);
                    }
                }

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass> AddStakeholder
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>)base.GetItem(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties.AddStakeholder);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry
                    Project_StakeholderProperty = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Entry(
                        "Project_StakeholderProperty",
                        false,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties._Project_StakeholderProperty_Stub,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties._Project_StakeholderProperty_Validate,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.PropertySetProperties._Project_StakeholderProperty_OnValueChanged);
                private static void _Project_StakeholderProperty_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenLocalProperty<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::LightSwitchApplication.Project_Stakeholder>.Data> c, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._Project_StakeholderProperty, sf);
                }
                private static void _Project_StakeholderProperty_Validate(global::LightSwitchApplication.AddProjectStakeholder s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Project_StakeholderProperty_Validate(r);
                }
                private static void _Project_StakeholderProperty_OnValueChanged(global::LightSwitchApplication.AddProjectStakeholder s)
                {
                    s.Project_StakeholderProperty_Changed();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties._AddStakeholderType_CreateExecutableObject);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data> c, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholderType_CreateExecutableObject(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.AddProjectStakeholder.DetailsClass)d).Methods.AddStakeholderType.CreateInvocation();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.CommandSetProperties._AddStakeholder_CreateExecutableObject);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommand<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data> c, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderCommand, sf);
                }
                private static global::Microsoft.LightSwitch.IExecutable _AddStakeholder_CreateExecutableObject(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d)
                {
                    return ((global::LightSwitchApplication.AddProjectStakeholder.DetailsClass)d).Methods.AddStakeholder.CreateInvocation();
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry
                    AddStakeholderType = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry(
                        "AddStakeholderType",
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholderType_Stub,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholderType_CanInvoke,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholderType_InvokeMethod);
                private static void _AddStakeholderType_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data> c, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderTypeMethod, sf);
                }
                private static global::System.Exception _AddStakeholderType_CanInvoke(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholderType_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholderType_InvokeMethod(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholderType_Execute();
                }

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry
                    AddStakeholder = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Entry(
                        "AddStakeholder",
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholder_Stub,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholder_CanInvoke,
                        global::LightSwitchApplication.AddProjectStakeholder.DetailsClass.MethodSetProperties._AddStakeholder_InvokeMethod);
                private static void _AddStakeholder_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddProjectStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethod<global::LightSwitchApplication.AddProjectStakeholder, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass>.Data> c, global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._AddStakeholderMethod, sf);
                }
                private static global::System.Exception _AddStakeholder_CanInvoke(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args, global::System.Exception ex)
                {
                    bool result = true;
                    d.Screen.AddStakeholder_CanExecute(ref result);
                    return result ? null : ex;
                }
                private static void _AddStakeholder_InvokeMethod(global::LightSwitchApplication.AddProjectStakeholder.DetailsClass d, global::System.Collections.ObjectModel.ReadOnlyCollection<object> args)
                {
                    d.Screen.AddStakeholder_Execute();
                }

            }
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
    public sealed partial class AddStakeholder
        : global::Microsoft.LightSwitch.Framework.Client.ScreenObject<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private AddStakeholder() : base("LightSwitchApplication.Web:AddStakeholder")
        {
            global::LightSwitchApplication.AddStakeholder.DetailsClass.Initialize(this);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public static AddStakeholder CreateInstance()
        {
            return new global::LightSwitchApplication.AddStakeholder(
            );
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_InitializeDataWorkspace(global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_Created();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_Activated();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_Saving(ref bool handled);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_Saved();
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_Closing(ref bool cancel);
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void AddStakeholder_SaveError(global::System.Exception exception, ref bool handled);
     
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)((global::Microsoft.LightSwitch.Details.Client.IScreenDetails)this.Details).DataWorkspace;
            }
        }
        
        #endregion
 
        partial void Stakeholders_SelectionChanged();

        partial void Stakeholders_Changed(global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e);

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholders_Loaded(bool succeeded);

        /// <summary>
        /// Gets the Stakeholders visual collection. The collection contains all records currently shown on the respective list or grid control.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.LightSwitch.Framework.Client.VisualCollection<global::LightSwitchApplication.Stakeholder> Stakeholders
        {
            get
            {
                return global::LightSwitchApplication.AddStakeholder.DetailsClass.GetValue(this, global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties.Stakeholders);
            }
        }
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Stakeholders_Validate(global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder results);
 
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed class DetailsClass
            : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySet, global::LightSwitchApplication.AddStakeholder.DetailsClass.CommandSet, global::LightSwitchApplication.AddStakeholder.DetailsClass.MethodSet>
        {

            static DetailsClass()
            {
                var initializePropertyEntry = global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties.Stakeholders;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>.Entry
                __AddStakeholderEntry = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenDetails<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>.Entry(
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeInitializeDataWorkspace,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeSavingEvent,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeSavedEvent,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeClosingEvent,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeCreated,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeActivated,
                    global::LightSwitchApplication.AddStakeholder.DetailsClass.__AddStakeholder_InvokeSaveErrorEvent);
            private static void __AddStakeholder_InvokeInitializeDataWorkspace(global::LightSwitchApplication.AddStakeholder s, global::System.Collections.Generic.List<global::Microsoft.LightSwitch.IDataService> saveChangesTo)
            {
                s.AddStakeholder_InitializeDataWorkspace(saveChangesTo);
            }
            private static bool __AddStakeholder_InvokeSavingEvent(global::LightSwitchApplication.AddStakeholder s)
            {
                bool handled = false;
                s.AddStakeholder_Saving(ref handled);
                return handled;
            }
            private static void __AddStakeholder_InvokeSavedEvent(global::LightSwitchApplication.AddStakeholder s)
            {
                s.AddStakeholder_Saved();
            }
            private static bool __AddStakeholder_InvokeClosingEvent(global::LightSwitchApplication.AddStakeholder s)
            {
                bool cancel = false;
                s.AddStakeholder_Closing(ref cancel);
                return cancel;
            }
            private static void __AddStakeholder_InvokeCreated(global::LightSwitchApplication.AddStakeholder s)
            {
                s.AddStakeholder_Created();
            }
            private static void __AddStakeholder_InvokeActivated(global::LightSwitchApplication.AddStakeholder s)
            {
                s.AddStakeholder_Activated();
            }
            private static bool __AddStakeholder_InvokeSaveErrorEvent(global::LightSwitchApplication.AddStakeholder s, global::System.Exception ex)
            {
                bool handled = false;
                s.AddStakeholder_SaveError(ex, ref handled);
                return handled;
            }

            public DetailsClass() : base()
            {
            }

            public new global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySet Properties
            {
                get
                {
                    return base.Properties;
                }
            }

            public new global::LightSwitchApplication.AddStakeholder.DetailsClass.CommandSet Commands
            {
                get
                {
                    return base.Commands;
                }
            }

            public new global::LightSwitchApplication.AddStakeholder.DetailsClass.MethodSet Methods
            {
                get
                {
                    return base.Methods;
                }
            }

            private global::Microsoft.LightSwitch.IDataServiceQueryable StakeholdersQuery()
            {
                return this.Screen.DataWorkspace.ProcurementData.Stakeholders;
            }

            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder>.Data _Stakeholders;

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class PropertySet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenPropertySet<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>
            {

                public global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder> Stakeholders
                {
                    get
                    {
                        return (global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder>)base.GetItem(global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties.Stakeholders);
                    }
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class CommandSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCommandSet<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed class MethodSet
                : global::Microsoft.LightSwitch.Details.Framework.Client.ScreenMethodSet<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass>
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class PropertySetProperties
            {

                public static readonly global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder>.Entry
                    Stakeholders = new global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder>.Entry(
                        "Stakeholders",
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_Stub,
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_Validate,
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_CreateQuery,
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_SelectionChanged,
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_OnCollectionChanged,
                        global::LightSwitchApplication.AddStakeholder.DetailsClass.PropertySetProperties._Stakeholders_OnLoaded);
                private static void _Stakeholders_Stub(global::Microsoft.LightSwitch.Details.Framework.Base.DetailsCallback<global::LightSwitchApplication.AddStakeholder.DetailsClass, global::Microsoft.LightSwitch.Details.Framework.Client.ScreenCollectionProperty<global::LightSwitchApplication.AddStakeholder, global::LightSwitchApplication.AddStakeholder.DetailsClass, global::LightSwitchApplication.Stakeholder>.Data> c, global::LightSwitchApplication.AddStakeholder.DetailsClass d, object sf)
                {
                    c(d, ref d._Stakeholders, sf);
                }
                private static void _Stakeholders_Validate(global::LightSwitchApplication.AddStakeholder s, global::Microsoft.LightSwitch.Framework.Client.ScreenValidationResultsBuilder r)
                {
                    s.Stakeholders_Validate(r);
                }
                private static global::Microsoft.LightSwitch.IDataServiceQueryable _Stakeholders_CreateQuery(global::LightSwitchApplication.AddStakeholder.DetailsClass d, object[] args)
                {
                    return d.StakeholdersQuery();
                }
                private static void _Stakeholders_SelectionChanged(global::LightSwitchApplication.AddStakeholder s)
                {
                    s.Stakeholders_SelectionChanged();
                }
                private static void _Stakeholders_OnCollectionChanged(global::LightSwitchApplication.AddStakeholder s, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    s.Stakeholders_Changed(e);
                }
                private static void _Stakeholders_OnLoaded(global::LightSwitchApplication.AddStakeholder s, bool succeeded)
                {
                    s.Stakeholders_Loaded(succeeded);
                }

            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class CommandSetProperties
            {
            }

            [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "11.3.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sealed class MethodSetProperties
            {
            }
        }
    }
}
